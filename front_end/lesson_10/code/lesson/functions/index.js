// Functions

// 2 типа функций по использованию:
// 1 - которая что-то возвращает. Например: функция, которая возвращает сумму всех чисел, переданных в аргументах
// 2 - котороя ничего не возвращает, а просто выполняет какие-то действия. Например: открыть модальное окно на странице при нажатии на кнопку
// Функции которые что-то возвращают
function sum(a, b, c) {
  // Возращаем сумму 3 чисел
  return a + b + c;
}

let sumResult = sum(1, 2, 3);
console.log(sumResult);

// Функции, которые что-то выполняют, но ничего не возвращают

function sum1(a, b, c) {
  // Мы не возвращаем ничего, а выполняем действие(выводим сумму в консоль)
  console.log(a + b + c);
}

// sum1(1, 4, 5); // Вызываем фцнкцию, но ничего не возвращаем

let sumResult2 = sum1(1, 4, 5);
console.log(sumResult2);

// 1 вид:Function Declaration - можно в строках кода вызывать до того как мы ее написали
//Правила аргументов:
// - если вы должны передать функции аргументы, а значений по умолчанию у этих аргументов нету и при этом мы ничего не передаем то они равны undefind
// - если вы должны передать функции аргументы, а значения по умолчанию у этих аргументов есть  и при этом мы ничего не передаем то они равны значениям по умолчанию
// - если вы должны передать функции аргументы, а значения по умолчанию у этих аргументов есть  и при этом мы аргументы передаем то они равны тому что мы передаем

console.log(multiply(5, 20));

function multiply(a = 10, b = 10) {
  console.log("значение аргумента a: ", a);
  console.log("значение аргумента b: ", b);
  return a * b;
}

console.log(multiply());

// 2 вид: Function Expression - нельзя в строках кода вызывать до того как мы ее написали

let divisionResult = division(15, 3);
console.log(divisionResult);

// По схеме работы работает схоже с обычными переменными обьявленными через let или const
let division = function (a, b) {
  return a / b;
};

//1 отличие: у них разный синтаксис
// 2 отличие: Function Declaration можно вызываеть до ее инициализации(обьявления-написания), Function Expression - нельзя, можно только после

// 3 вид: стрелочные функции () => {}

// 1 правило стрелоных функций: вы можете писать ее полностью как на примере ниже
// const minus = (a, b) => {
//   return a - b;
// };

// 2 правило: если ваша функция ничего не выполняет, кроме как возврата значения(return), то вы можете опустить написание фигурных скобок {}  и слова return
const minus = (a, b) => a - b;

let minusResult = minus(10, 4);
console.log(minusResult);


// 3 правило: если у вас только 1 аргумент у стрелочной функции, то вы можете опустить написание круглых скобок
const returnName = fullname => fullname;
console.log(returnName("Brat Pitt")); 

// 4 правило: если вы хотите выполнить каки-то несколько действия без return то фигурные скобки обязательно
// Если перед return вы выполняете в функции какие-то действия, то обязательно и фигурные скобки и return
const showMessage = message => {
    console.log(message);
    let newMessage = `New message: ${message}`
    return newMessage;
};

